// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FriendsClient is the client API for Friends service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendsClient interface {
	// Request a list of the usernames of all friends of a particular user.
	GetFriendsUsernamesForUser(ctx context.Context, in *GetFriendsForUserRequest, opts ...grpc.CallOption) (*GetFriendsUsernamesForUserResponse, error)
	// Request a list of the usernames of all awaiting friends of a particular user.
	GetAwaitingFriendsUsernamesForUser(ctx context.Context, in *GetFriendsForUserRequest, opts ...grpc.CallOption) (*GetFriendsUsernamesForUserResponse, error)
	// Request a list of the IDs of all friends of a particular user.
	GetFriendsForUser(ctx context.Context, in *GetFriendsForUserRequest, opts ...grpc.CallOption) (*GetFriendsForUserResponse, error)
	GetAwaitingFriendsForUser(ctx context.Context, in *GetFriendsForUserRequest, opts ...grpc.CallOption) (*GetFriendsForUserResponse, error)
	// Request information about the connection between two users, checking for existence and strength.
	GetConnectionBetweenUsers(ctx context.Context, in *GetConnectionBetweenUsersRequest, opts ...grpc.CallOption) (*ConnectionBetweenUsersResponse, error)
	// Request a list of given size of users who might be friends of the requesting user.
	GetRecommendationsForUser(ctx context.Context, in *GetRecommendationsForUserRequest, opts ...grpc.CallOption) (*GetRecommendationsForUserResponse, error)
	// Add two users as friends and create a connection between them.
	CreateConnectionForUsers(ctx context.Context, in *CreateConnectionForUsersRequest, opts ...grpc.CallOption) (*CreateConnectionForUsersResponse, error)
	AddAwaitingFriend(ctx context.Context, in *AddAwaitingFriendRequest, opts ...grpc.CallOption) (*AddAwaitingFriendResponse, error)
	// Update a connection strength between two users.
	UpdateConnectionBetweenUsers(ctx context.Context, in *UpdateConnectionBetweenUsersRequest, opts ...grpc.CallOption) (*ConnectionBetweenUsersResponse, error)
	// Delete the connection between two users.
	DeleteConnectionBetweenUsers(ctx context.Context, in *DeleteConnectionBetweenUsersRequest, opts ...grpc.CallOption) (*DeleteConnectionBetweenUsersResponse, error)
}

type friendsClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendsClient(cc grpc.ClientConnInterface) FriendsClient {
	return &friendsClient{cc}
}

func (c *friendsClient) GetFriendsUsernamesForUser(ctx context.Context, in *GetFriendsForUserRequest, opts ...grpc.CallOption) (*GetFriendsUsernamesForUserResponse, error) {
	out := new(GetFriendsUsernamesForUserResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/GetFriendsUsernamesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) GetAwaitingFriendsUsernamesForUser(ctx context.Context, in *GetFriendsForUserRequest, opts ...grpc.CallOption) (*GetFriendsUsernamesForUserResponse, error) {
	out := new(GetFriendsUsernamesForUserResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/GetAwaitingFriendsUsernamesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) GetFriendsForUser(ctx context.Context, in *GetFriendsForUserRequest, opts ...grpc.CallOption) (*GetFriendsForUserResponse, error) {
	out := new(GetFriendsForUserResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/GetFriendsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) GetAwaitingFriendsForUser(ctx context.Context, in *GetFriendsForUserRequest, opts ...grpc.CallOption) (*GetFriendsForUserResponse, error) {
	out := new(GetFriendsForUserResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/GetAwaitingFriendsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) GetConnectionBetweenUsers(ctx context.Context, in *GetConnectionBetweenUsersRequest, opts ...grpc.CallOption) (*ConnectionBetweenUsersResponse, error) {
	out := new(ConnectionBetweenUsersResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/GetConnectionBetweenUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) GetRecommendationsForUser(ctx context.Context, in *GetRecommendationsForUserRequest, opts ...grpc.CallOption) (*GetRecommendationsForUserResponse, error) {
	out := new(GetRecommendationsForUserResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/GetRecommendationsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) CreateConnectionForUsers(ctx context.Context, in *CreateConnectionForUsersRequest, opts ...grpc.CallOption) (*CreateConnectionForUsersResponse, error) {
	out := new(CreateConnectionForUsersResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/CreateConnectionForUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) AddAwaitingFriend(ctx context.Context, in *AddAwaitingFriendRequest, opts ...grpc.CallOption) (*AddAwaitingFriendResponse, error) {
	out := new(AddAwaitingFriendResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/AddAwaitingFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) UpdateConnectionBetweenUsers(ctx context.Context, in *UpdateConnectionBetweenUsersRequest, opts ...grpc.CallOption) (*ConnectionBetweenUsersResponse, error) {
	out := new(ConnectionBetweenUsersResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/UpdateConnectionBetweenUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsClient) DeleteConnectionBetweenUsers(ctx context.Context, in *DeleteConnectionBetweenUsersRequest, opts ...grpc.CallOption) (*DeleteConnectionBetweenUsersResponse, error) {
	out := new(DeleteConnectionBetweenUsersResponse)
	err := c.cc.Invoke(ctx, "/kic.friends.Friends/DeleteConnectionBetweenUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendsServer is the server API for Friends service.
// All implementations must embed UnimplementedFriendsServer
// for forward compatibility
type FriendsServer interface {
	// Request a list of the usernames of all friends of a particular user.
	GetFriendsUsernamesForUser(context.Context, *GetFriendsForUserRequest) (*GetFriendsUsernamesForUserResponse, error)
	// Request a list of the usernames of all awaiting friends of a particular user.
	GetAwaitingFriendsUsernamesForUser(context.Context, *GetFriendsForUserRequest) (*GetFriendsUsernamesForUserResponse, error)
	// Request a list of the IDs of all friends of a particular user.
	GetFriendsForUser(context.Context, *GetFriendsForUserRequest) (*GetFriendsForUserResponse, error)
	GetAwaitingFriendsForUser(context.Context, *GetFriendsForUserRequest) (*GetFriendsForUserResponse, error)
	// Request information about the connection between two users, checking for existence and strength.
	GetConnectionBetweenUsers(context.Context, *GetConnectionBetweenUsersRequest) (*ConnectionBetweenUsersResponse, error)
	// Request a list of given size of users who might be friends of the requesting user.
	GetRecommendationsForUser(context.Context, *GetRecommendationsForUserRequest) (*GetRecommendationsForUserResponse, error)
	// Add two users as friends and create a connection between them.
	CreateConnectionForUsers(context.Context, *CreateConnectionForUsersRequest) (*CreateConnectionForUsersResponse, error)
	AddAwaitingFriend(context.Context, *AddAwaitingFriendRequest) (*AddAwaitingFriendResponse, error)
	// Update a connection strength between two users.
	UpdateConnectionBetweenUsers(context.Context, *UpdateConnectionBetweenUsersRequest) (*ConnectionBetweenUsersResponse, error)
	// Delete the connection between two users.
	DeleteConnectionBetweenUsers(context.Context, *DeleteConnectionBetweenUsersRequest) (*DeleteConnectionBetweenUsersResponse, error)
	mustEmbedUnimplementedFriendsServer()
}

// UnimplementedFriendsServer must be embedded to have forward compatible implementations.
type UnimplementedFriendsServer struct {
}

func (UnimplementedFriendsServer) GetFriendsUsernamesForUser(context.Context, *GetFriendsForUserRequest) (*GetFriendsUsernamesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsUsernamesForUser not implemented")
}
func (UnimplementedFriendsServer) GetAwaitingFriendsUsernamesForUser(context.Context, *GetFriendsForUserRequest) (*GetFriendsUsernamesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwaitingFriendsUsernamesForUser not implemented")
}
func (UnimplementedFriendsServer) GetFriendsForUser(context.Context, *GetFriendsForUserRequest) (*GetFriendsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsForUser not implemented")
}
func (UnimplementedFriendsServer) GetAwaitingFriendsForUser(context.Context, *GetFriendsForUserRequest) (*GetFriendsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwaitingFriendsForUser not implemented")
}
func (UnimplementedFriendsServer) GetConnectionBetweenUsers(context.Context, *GetConnectionBetweenUsersRequest) (*ConnectionBetweenUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionBetweenUsers not implemented")
}
func (UnimplementedFriendsServer) GetRecommendationsForUser(context.Context, *GetRecommendationsForUserRequest) (*GetRecommendationsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationsForUser not implemented")
}
func (UnimplementedFriendsServer) CreateConnectionForUsers(context.Context, *CreateConnectionForUsersRequest) (*CreateConnectionForUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectionForUsers not implemented")
}
func (UnimplementedFriendsServer) AddAwaitingFriend(context.Context, *AddAwaitingFriendRequest) (*AddAwaitingFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAwaitingFriend not implemented")
}
func (UnimplementedFriendsServer) UpdateConnectionBetweenUsers(context.Context, *UpdateConnectionBetweenUsersRequest) (*ConnectionBetweenUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionBetweenUsers not implemented")
}
func (UnimplementedFriendsServer) DeleteConnectionBetweenUsers(context.Context, *DeleteConnectionBetweenUsersRequest) (*DeleteConnectionBetweenUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectionBetweenUsers not implemented")
}
func (UnimplementedFriendsServer) mustEmbedUnimplementedFriendsServer() {}

// UnsafeFriendsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendsServer will
// result in compilation errors.
type UnsafeFriendsServer interface {
	mustEmbedUnimplementedFriendsServer()
}

func RegisterFriendsServer(s grpc.ServiceRegistrar, srv FriendsServer) {
	s.RegisterService(&_Friends_serviceDesc, srv)
}

func _Friends_GetFriendsUsernamesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).GetFriendsUsernamesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/GetFriendsUsernamesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).GetFriendsUsernamesForUser(ctx, req.(*GetFriendsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_GetAwaitingFriendsUsernamesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).GetAwaitingFriendsUsernamesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/GetAwaitingFriendsUsernamesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).GetAwaitingFriendsUsernamesForUser(ctx, req.(*GetFriendsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_GetFriendsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).GetFriendsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/GetFriendsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).GetFriendsForUser(ctx, req.(*GetFriendsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_GetAwaitingFriendsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).GetAwaitingFriendsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/GetAwaitingFriendsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).GetAwaitingFriendsForUser(ctx, req.(*GetFriendsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_GetConnectionBetweenUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionBetweenUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).GetConnectionBetweenUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/GetConnectionBetweenUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).GetConnectionBetweenUsers(ctx, req.(*GetConnectionBetweenUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_GetRecommendationsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).GetRecommendationsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/GetRecommendationsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).GetRecommendationsForUser(ctx, req.(*GetRecommendationsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_CreateConnectionForUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionForUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).CreateConnectionForUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/CreateConnectionForUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).CreateConnectionForUsers(ctx, req.(*CreateConnectionForUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_AddAwaitingFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAwaitingFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).AddAwaitingFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/AddAwaitingFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).AddAwaitingFriend(ctx, req.(*AddAwaitingFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_UpdateConnectionBetweenUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionBetweenUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).UpdateConnectionBetweenUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/UpdateConnectionBetweenUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).UpdateConnectionBetweenUsers(ctx, req.(*UpdateConnectionBetweenUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friends_DeleteConnectionBetweenUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionBetweenUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServer).DeleteConnectionBetweenUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kic.friends.Friends/DeleteConnectionBetweenUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServer).DeleteConnectionBetweenUsers(ctx, req.(*DeleteConnectionBetweenUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Friends_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kic.friends.Friends",
	HandlerType: (*FriendsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendsUsernamesForUser",
			Handler:    _Friends_GetFriendsUsernamesForUser_Handler,
		},
		{
			MethodName: "GetAwaitingFriendsUsernamesForUser",
			Handler:    _Friends_GetAwaitingFriendsUsernamesForUser_Handler,
		},
		{
			MethodName: "GetFriendsForUser",
			Handler:    _Friends_GetFriendsForUser_Handler,
		},
		{
			MethodName: "GetAwaitingFriendsForUser",
			Handler:    _Friends_GetAwaitingFriendsForUser_Handler,
		},
		{
			MethodName: "GetConnectionBetweenUsers",
			Handler:    _Friends_GetConnectionBetweenUsers_Handler,
		},
		{
			MethodName: "GetRecommendationsForUser",
			Handler:    _Friends_GetRecommendationsForUser_Handler,
		},
		{
			MethodName: "CreateConnectionForUsers",
			Handler:    _Friends_CreateConnectionForUsers_Handler,
		},
		{
			MethodName: "AddAwaitingFriend",
			Handler:    _Friends_AddAwaitingFriend_Handler,
		},
		{
			MethodName: "UpdateConnectionBetweenUsers",
			Handler:    _Friends_UpdateConnectionBetweenUsers_Handler,
		},
		{
			MethodName: "DeleteConnectionBetweenUsers",
			Handler:    _Friends_DeleteConnectionBetweenUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/friends.proto",
}
