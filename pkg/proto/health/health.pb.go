//
// These are messages and services relating to mental health tracking data, allowing for
// the logging of user mental health data and tracking the quality of their mental health state
// from day to day.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: proto/health.proto

package proto

import (
	common "github.com/kic/health/pkg/proto/common"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//Request from a user to get their mental health tracking data.
type GetHealthDataForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user in the user database, used globally for identification.
	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetHealthDataForUserRequest) Reset() {
	*x = GetHealthDataForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthDataForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthDataForUserRequest) ProtoMessage() {}

func (x *GetHealthDataForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthDataForUserRequest.ProtoReflect.Descriptor instead.
func (*GetHealthDataForUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{0}
}

func (x *GetHealthDataForUserRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

//
//Response to a user with complete mental health log
type MentalHealthLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Date of Mental Health Log Entry
	LogDate *common.Date `protobuf:"bytes,1,opt,name=logDate,proto3" json:"logDate,omitempty"`
	//Score denotes the mental health tracking score from logDate.
	Score int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	// Contains a journal entry from the user
	JournalName string `protobuf:"bytes,3,opt,name=journalName,proto3" json:"journalName,omitempty"`
	// The ID of the user in the user database, used globally for identification.
	UserID int64 `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *MentalHealthLog) Reset() {
	*x = MentalHealthLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentalHealthLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentalHealthLog) ProtoMessage() {}

func (x *MentalHealthLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentalHealthLog.ProtoReflect.Descriptor instead.
func (*MentalHealthLog) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{1}
}

func (x *MentalHealthLog) GetLogDate() *common.Date {
	if x != nil {
		return x.LogDate
	}
	return nil
}

func (x *MentalHealthLog) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MentalHealthLog) GetJournalName() string {
	if x != nil {
		return x.JournalName
	}
	return ""
}

func (x *MentalHealthLog) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

//
//Response to a user when user asks for health data.
type GetHealthDataForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//healthData denotes the data that was requested by user from mental health log
	HealthData []*MentalHealthLog `protobuf:"bytes,1,rep,name=healthData,proto3" json:"healthData,omitempty"`
}

func (x *GetHealthDataForUserResponse) Reset() {
	*x = GetHealthDataForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthDataForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthDataForUserResponse) ProtoMessage() {}

func (x *GetHealthDataForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthDataForUserResponse.ProtoReflect.Descriptor instead.
func (*GetHealthDataForUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{2}
}

func (x *GetHealthDataForUserResponse) GetHealthData() []*MentalHealthLog {
	if x != nil {
		return x.HealthData
	}
	return nil
}

type GetHealthDataByDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user in the user database, used globally for identification.
	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	//Date of Mental Health Log Entry
	LogDate *common.Date `protobuf:"bytes,2,opt,name=logDate,proto3" json:"logDate,omitempty"`
}

func (x *GetHealthDataByDateRequest) Reset() {
	*x = GetHealthDataByDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthDataByDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthDataByDateRequest) ProtoMessage() {}

func (x *GetHealthDataByDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthDataByDateRequest.ProtoReflect.Descriptor instead.
func (*GetHealthDataByDateRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{3}
}

func (x *GetHealthDataByDateRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetHealthDataByDateRequest) GetLogDate() *common.Date {
	if x != nil {
		return x.LogDate
	}
	return nil
}

type GetHealthDataByDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//healthData denotes the data that was requested by user from mental health log
	HealthData *MentalHealthLog `protobuf:"bytes,1,opt,name=healthData,proto3" json:"healthData,omitempty"`
}

func (x *GetHealthDataByDateResponse) Reset() {
	*x = GetHealthDataByDateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthDataByDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthDataByDateResponse) ProtoMessage() {}

func (x *GetHealthDataByDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthDataByDateResponse.ProtoReflect.Descriptor instead.
func (*GetHealthDataByDateResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{4}
}

func (x *GetHealthDataByDateResponse) GetHealthData() *MentalHealthLog {
	if x != nil {
		return x.HealthData
	}
	return nil
}

//
//Request from a user to add their mental health data to MentalHealthLog.
type AddHealthDataForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user in the user database, used globally for identification.
	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	//newEntry denotes the ID of the new entry that is requested to be made.
	NewEntry *MentalHealthLog `protobuf:"bytes,2,opt,name=newEntry,proto3" json:"newEntry,omitempty"`
}

func (x *AddHealthDataForUserRequest) Reset() {
	*x = AddHealthDataForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHealthDataForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHealthDataForUserRequest) ProtoMessage() {}

func (x *AddHealthDataForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHealthDataForUserRequest.ProtoReflect.Descriptor instead.
func (*AddHealthDataForUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{5}
}

func (x *AddHealthDataForUserRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddHealthDataForUserRequest) GetNewEntry() *MentalHealthLog {
	if x != nil {
		return x.NewEntry
	}
	return nil
}

type AddHealthDataForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AddHealthDataForUserResponse) Reset() {
	*x = AddHealthDataForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHealthDataForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHealthDataForUserResponse) ProtoMessage() {}

func (x *AddHealthDataForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHealthDataForUserResponse.ProtoReflect.Descriptor instead.
func (*AddHealthDataForUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{6}
}

func (x *AddHealthDataForUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

//
//Request from a user to delete their mental health data from MentalHealthLog.
type DeleteHealthDataForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user in the user database, used globally for identification.
	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	//Either delete all of data or delete specific date
	//
	// Types that are assignable to Data:
	//	*DeleteHealthDataForUserRequest_All
	//	*DeleteHealthDataForUserRequest_DateToRemove
	Data isDeleteHealthDataForUserRequest_Data `protobuf_oneof:"data"`
}

func (x *DeleteHealthDataForUserRequest) Reset() {
	*x = DeleteHealthDataForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHealthDataForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHealthDataForUserRequest) ProtoMessage() {}

func (x *DeleteHealthDataForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHealthDataForUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteHealthDataForUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteHealthDataForUserRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (m *DeleteHealthDataForUserRequest) GetData() isDeleteHealthDataForUserRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DeleteHealthDataForUserRequest) GetAll() bool {
	if x, ok := x.GetData().(*DeleteHealthDataForUserRequest_All); ok {
		return x.All
	}
	return false
}

func (x *DeleteHealthDataForUserRequest) GetDateToRemove() *common.Date {
	if x, ok := x.GetData().(*DeleteHealthDataForUserRequest_DateToRemove); ok {
		return x.DateToRemove
	}
	return nil
}

type isDeleteHealthDataForUserRequest_Data interface {
	isDeleteHealthDataForUserRequest_Data()
}

type DeleteHealthDataForUserRequest_All struct {
	//all denotes if all of the health data should be removed or not.
	All bool `protobuf:"varint,2,opt,name=all,proto3,oneof"`
}

type DeleteHealthDataForUserRequest_DateToRemove struct {
	//dateToRemove denotes the date of the mental health log data to remove.
	DateToRemove *common.Date `protobuf:"bytes,3,opt,name=dateToRemove,proto3,oneof"`
}

func (*DeleteHealthDataForUserRequest_All) isDeleteHealthDataForUserRequest_Data() {}

func (*DeleteHealthDataForUserRequest_DateToRemove) isDeleteHealthDataForUserRequest_Data() {}

//
//Response to a user when user asks to delete health data.
type DeleteHealthDataForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//entriesDeleted denotes the mental health log entries that was successfully deleted for the user
	EntriesDeleted uint32 `protobuf:"varint,1,opt,name=entriesDeleted,proto3" json:"entriesDeleted,omitempty"`
}

func (x *DeleteHealthDataForUserResponse) Reset() {
	*x = DeleteHealthDataForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHealthDataForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHealthDataForUserResponse) ProtoMessage() {}

func (x *DeleteHealthDataForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHealthDataForUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteHealthDataForUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteHealthDataForUserResponse) GetEntriesDeleted() uint32 {
	if x != nil {
		return x.EntriesDeleted
	}
	return 0
}

//
//Request from a user to update their mental health tracking data for a particular date.
type UpdateHealthDataForDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user in the user database, used globally for identification.
	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	//The desiredLogInfo denotes the log info that the user would like to update.
	DesiredLogInfo *MentalHealthLog `protobuf:"bytes,2,opt,name=desiredLogInfo,proto3" json:"desiredLogInfo,omitempty"`
}

func (x *UpdateHealthDataForDateRequest) Reset() {
	*x = UpdateHealthDataForDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHealthDataForDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHealthDataForDateRequest) ProtoMessage() {}

func (x *UpdateHealthDataForDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHealthDataForDateRequest.ProtoReflect.Descriptor instead.
func (*UpdateHealthDataForDateRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateHealthDataForDateRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateHealthDataForDateRequest) GetDesiredLogInfo() *MentalHealthLog {
	if x != nil {
		return x.DesiredLogInfo
	}
	return nil
}

type UpdateHealthDataForDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateHealthDataForDateResponse) Reset() {
	*x = UpdateHealthDataForDateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHealthDataForDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHealthDataForDateResponse) ProtoMessage() {}

func (x *UpdateHealthDataForDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHealthDataForDateResponse.ProtoReflect.Descriptor instead.
func (*UpdateHealthDataForDateResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateHealthDataForDateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

//
//Request form a user to get a mental health score
type GetMentalHealthScoreForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user in the user database, used globally for identification.
	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetMentalHealthScoreForUserRequest) Reset() {
	*x = GetMentalHealthScoreForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMentalHealthScoreForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMentalHealthScoreForUserRequest) ProtoMessage() {}

func (x *GetMentalHealthScoreForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMentalHealthScoreForUserRequest.ProtoReflect.Descriptor instead.
func (*GetMentalHealthScoreForUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{11}
}

func (x *GetMentalHealthScoreForUserRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

//
//Response to return a mental health score given a user ID
type GetMentalHealthScoreForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// overall mental health score for user
	Score int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *GetMentalHealthScoreForUserResponse) Reset() {
	*x = GetMentalHealthScoreForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMentalHealthScoreForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMentalHealthScoreForUserResponse) ProtoMessage() {}

func (x *GetMentalHealthScoreForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMentalHealthScoreForUserResponse.ProtoReflect.Descriptor instead.
func (*GetMentalHealthScoreForUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{12}
}

func (x *GetMentalHealthScoreForUserResponse) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_proto_health_proto protoreflect.FileDescriptor

var file_proto_health_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8d, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x6f, 0x67,
	0x12, 0x2a, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x37,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x38, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x12, 0x36, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x49, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3b, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x32, 0xb6, 0x05, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x2e,
	0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x41,
	0x64, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x72, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6b, 0x69, 0x63,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6b, 0x69, 0x63,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_health_proto_rawDescOnce sync.Once
	file_proto_health_proto_rawDescData = file_proto_health_proto_rawDesc
)

func file_proto_health_proto_rawDescGZIP() []byte {
	file_proto_health_proto_rawDescOnce.Do(func() {
		file_proto_health_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_health_proto_rawDescData)
	})
	return file_proto_health_proto_rawDescData
}

var file_proto_health_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_health_proto_goTypes = []interface{}{
	(*GetHealthDataForUserRequest)(nil),         // 0: kic.health.GetHealthDataForUserRequest
	(*MentalHealthLog)(nil),                     // 1: kic.health.MentalHealthLog
	(*GetHealthDataForUserResponse)(nil),        // 2: kic.health.GetHealthDataForUserResponse
	(*GetHealthDataByDateRequest)(nil),          // 3: kic.health.GetHealthDataByDateRequest
	(*GetHealthDataByDateResponse)(nil),         // 4: kic.health.GetHealthDataByDateResponse
	(*AddHealthDataForUserRequest)(nil),         // 5: kic.health.AddHealthDataForUserRequest
	(*AddHealthDataForUserResponse)(nil),        // 6: kic.health.AddHealthDataForUserResponse
	(*DeleteHealthDataForUserRequest)(nil),      // 7: kic.health.DeleteHealthDataForUserRequest
	(*DeleteHealthDataForUserResponse)(nil),     // 8: kic.health.DeleteHealthDataForUserResponse
	(*UpdateHealthDataForDateRequest)(nil),      // 9: kic.health.UpdateHealthDataForDateRequest
	(*UpdateHealthDataForDateResponse)(nil),     // 10: kic.health.UpdateHealthDataForDateResponse
	(*GetMentalHealthScoreForUserRequest)(nil),  // 11: kic.health.GetMentalHealthScoreForUserRequest
	(*GetMentalHealthScoreForUserResponse)(nil), // 12: kic.health.GetMentalHealthScoreForUserResponse
	(*common.Date)(nil),                         // 13: kic.common.Date
}
var file_proto_health_proto_depIdxs = []int32{
	13, // 0: kic.health.MentalHealthLog.logDate:type_name -> kic.common.Date
	1,  // 1: kic.health.GetHealthDataForUserResponse.healthData:type_name -> kic.health.MentalHealthLog
	13, // 2: kic.health.GetHealthDataByDateRequest.logDate:type_name -> kic.common.Date
	1,  // 3: kic.health.GetHealthDataByDateResponse.healthData:type_name -> kic.health.MentalHealthLog
	1,  // 4: kic.health.AddHealthDataForUserRequest.newEntry:type_name -> kic.health.MentalHealthLog
	13, // 5: kic.health.DeleteHealthDataForUserRequest.dateToRemove:type_name -> kic.common.Date
	1,  // 6: kic.health.UpdateHealthDataForDateRequest.desiredLogInfo:type_name -> kic.health.MentalHealthLog
	0,  // 7: kic.health.HealthTracking.GetHealthDataForUser:input_type -> kic.health.GetHealthDataForUserRequest
	5,  // 8: kic.health.HealthTracking.AddHealthDataForUser:input_type -> kic.health.AddHealthDataForUserRequest
	7,  // 9: kic.health.HealthTracking.DeleteHealthDataForUser:input_type -> kic.health.DeleteHealthDataForUserRequest
	9,  // 10: kic.health.HealthTracking.UpdateHealthDataForDate:input_type -> kic.health.UpdateHealthDataForDateRequest
	11, // 11: kic.health.HealthTracking.GetMentalHealthScoreForUser:input_type -> kic.health.GetMentalHealthScoreForUserRequest
	3,  // 12: kic.health.HealthTracking.GetHealthDataByDate:input_type -> kic.health.GetHealthDataByDateRequest
	2,  // 13: kic.health.HealthTracking.GetHealthDataForUser:output_type -> kic.health.GetHealthDataForUserResponse
	6,  // 14: kic.health.HealthTracking.AddHealthDataForUser:output_type -> kic.health.AddHealthDataForUserResponse
	8,  // 15: kic.health.HealthTracking.DeleteHealthDataForUser:output_type -> kic.health.DeleteHealthDataForUserResponse
	10, // 16: kic.health.HealthTracking.UpdateHealthDataForDate:output_type -> kic.health.UpdateHealthDataForDateResponse
	12, // 17: kic.health.HealthTracking.GetMentalHealthScoreForUser:output_type -> kic.health.GetMentalHealthScoreForUserResponse
	4,  // 18: kic.health.HealthTracking.GetHealthDataByDate:output_type -> kic.health.GetHealthDataByDateResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_health_proto_init() }
func file_proto_health_proto_init() {
	if File_proto_health_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_health_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthDataForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentalHealthLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthDataForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthDataByDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthDataByDateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHealthDataForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHealthDataForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHealthDataForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHealthDataForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHealthDataForDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHealthDataForDateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMentalHealthScoreForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMentalHealthScoreForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_health_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DeleteHealthDataForUserRequest_All)(nil),
		(*DeleteHealthDataForUserRequest_DateToRemove)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_health_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_health_proto_goTypes,
		DependencyIndexes: file_proto_health_proto_depIdxs,
		MessageInfos:      file_proto_health_proto_msgTypes,
	}.Build()
	File_proto_health_proto = out.File
	file_proto_health_proto_rawDesc = nil
	file_proto_health_proto_goTypes = nil
	file_proto_health_proto_depIdxs = nil
}
